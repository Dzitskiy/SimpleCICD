name: ASP.NET Core CI/CD with SonarQube and Docker Deploy

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch: # Allows manual triggering

env:
  DOTNET_VERSION: '8.0.x' # Adjust to your .NET version
  SONAR_PROJECT_KEY: 'dzitskiy'
  DOCKER_IMAGE_NAME: 'SimpleCICD'

jobs:
  build-test-and-sonar:
    name: Build, Test, and Analyze with SonarQube
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clone should be disabled for SonarQube

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Start SonarQube Analysis
        run: |
          dotnet sonarscanner begin /k:"${{ env.SONAR_PROJECT_KEY }}" \
          /d:sonar.host.url="${{ secrets.SONARQUBE_URL }}" \
          /d:sonar.login="${{ secrets.SONARQUBE_TOKEN }}"
        env:
          SONARQUBE_URL: ${{ secrets.SONARQUBE_URL }}
          SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build Solution
        run: dotnet build --configuration Release --no-restore

      - name: Run Tests
        run: dotnet test --configuration Release --no-build --verbosity normal

      - name: Finalize SonarQube Analysis
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONARQUBE_TOKEN }}"

  deploy:
    name: Deploy via Docker Compose over SSH
    runs-on: ubuntu-latest
    needs: build-test-and-sonar # Deployment depends on successful build and test
    if: github.ref == 'refs/heads/master' # Deploy only from master branch

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .

      - name: Save Docker Image to Tar
        run: docker save ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} -o image.tar

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            # Create app directory if it doesn't exist
            mkdir -p /opt/myapp
            
            # Copy and import the new image
            docker load -i /tmp/image.tar
            
            # Stop and remove existing containers
            cd /opt/myapp
            docker compose down
            
            # Update docker-compose.yml with the new image tag if needed
            # This step assumes your docker-compose.yml is already on the server
            # and uses the 'latest' tag or a variable. For a fixed tag:
            # sed -i 's/image: your_app_image:.*/image: your_app_image:${{ github.sha }}/' docker-compose.yml
            
            # Start updated application
            docker compose up -d
            
            # Cleanup old images
            docker image prune -f          
